

# This file was *autogenerated* from the file bigrade_test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0)
import itertools

# poly_list = list(var('f_%d' % i) for i in range(num_poly))

# Z = V(f0,..,fc)
# then canonical bundle of Z w_z \cong O_Z(m) with
# m = sum(di) - n - 1

# J_p,m = H^{n-p,p}_van(X)

# d_i = deg(f_i)

# bigrading is
# deg(x_i) = (0,1)
# deg(y_i) = (1,-deg(f_i))


# number of hypersurfaces in complete intersection

num_poly = _sage_const_1 

p = _sage_const_5 
prec = _sage_const_2 


# R.<x_0,x_1,x_2,x_3,y_1,y_2> = QQ[]
R = QQ['x_0, x_1, x_2, x_3, y_1']; (x_0, x_1, x_2, x_3, y_1,) = R._first_ngens(5)
# R.<x_0,x_1,x_2,x_3,y_1,y_2> = QQ[]
# R.<x_0,x_1,x_2,x_3,x_4,y_1,y_2> = QQ[]
# R.<x_0,x_1,x_2,x_3,x_4,x_5,y_1,y_2> = QQ[]


gens = R.gens()
n = len(gens) - num_poly-_sage_const_1 
# assert len(gens) == num_poly + n+1

x_vars = gens[:n+_sage_const_1 ]
y_vars = gens[n+_sage_const_1 :]

# J_p,m consists of p copies of y_i and sum_d_i copies of x_j
# maybe compute by first all monomials in J_p,m for fixed p, then finding a basis

f = x_0**_sage_const_3  + x_1**_sage_const_3  + x_2**_sage_const_3  - x_0*x_1*x_2 + x_3**_sage_const_3 
# f = x_0^2 + x_1^2 + x_2^2 + x_3^2
# g = x_0^2 + 2*x_1^2 + 3*x_2^2 + 4*x_3^2
# h = x_0*x_1 + x_1*x_2 + x_2*x_3


# f = x_0^4+x_0^3*x_1+x_0*x_1^3+x_0^2*x_1*x_2+x_0*x_1^2*x_2+x_1^3*x_2+x_0^2*x_2^2+x_0*x_2^3+x_1*x_2^3+x_0*x_1*x_2*x_3+x_2^3*x_3+x_0^2*x_3^2+x_0*x_1*x_3^2+x_1*x_2*x_3^2+x_0*x_3^3+x_1*x_3^3+x_2*x_3^3
# f = x_0^2+2*x_0*x_1+2*x_1^2-x_0*x_2+x_1*x_2-2*x_0*x_3-x_1*x_3+2*x_2*x_3-2*x_3^2+x_0*x_4+2*x_2*x_4+2*x_3*x_4
# g = -2*x_0^3-2*x_0^2*x_1+x_0*x_1^2-x_1^3+2*x_0^2*x_2-x_0*x_1*x_2-2*x_1^2*x_2-2*x_1*x_2^2+x_0^2*x_3+2*x_0*x_1*x_3+2*x_1^2*x_3+2*x_0*x_2*x_3-x_1*x_2*x_3+x_0*x_3^2+x_2*x_3^2-x_0^2*x_4+2*x_1^2*x_4-2*x_0*x_2*x_4+x_1*x_2*x_4-2*x_2^2*x_4-2*x_2*x_3*x_4+2*x_0*x_4^2-x_2*x_4^2-2*x_4^3
# f = sum([gens[i]^2 for i in range(len(gens[:n+1]))])

poly_list = [f]
# f_0 = f; f_1 = g;
# poly_list = [f_0,f_1]
# poly_list = [f,g,h]

# todo: check if no rational points?

d = [_.degree() for _ in poly_list]
m = sum([f.degree() for f in poly_list]) - n - _sage_const_1 

F = sum([y_vars[i] * poly_list[i] for i in range(num_poly)])


assert p in Primes(), f'Warning: {p} is not prime'

# Macaulay2 code to check smoothness
s = f'''
k = ZZ/{p};
R = k[x_0..x_{n}];
I = ideal {str(tuple(poly_list))[:-_sage_const_2 ] if len(poly_list) == _sage_const_1  else str(tuple(poly_list))[:-_sage_const_1 ] });
J = I + minors({num_poly}, jacobian I);
saturate J == R
'''
assert str(macaulay2(s)) == "true", f'Warning: F not smooth modulo {p}'


# Macaulay2 code to run to compute Griffiths ring
s = f'''
R = QQ[x_0..x_{n},y_1..y_{num_poly}, Degrees=>{{{n+_sage_const_1 }:{{0,1}},
{str([(_sage_const_1 ,-i) for i in d])[_sage_const_1 :-_sage_const_1 ].replace('(','{').replace(')','}')}}}];
F={sum([y_vars[i] * poly_list[i] for i in range(num_poly)])};
J = R/ideal jacobian F;
for i from 0 to {n-num_poly} list toString basis({{i,{m}}}, J)
'''
t = str(macaulay2(s))
t = t.replace("{","").replace("}","").replace("^","**").replace(" ","").split("matrix")[_sage_const_1 :]
t = "".join(t).split(",")
B = []
for _ in t:
	if _ != "":
		eval("B.append(R(" + _ +"))")
print(B)


# Macaulay2 code to run to compute P1
s = f'''
R = QQ[x_0..x_{n},y_1..y_{num_poly}, Degrees=>{{{n+_sage_const_1 }:{{0,1}},
{str([(_sage_const_1 ,-i) for i in d])[_sage_const_1 :-_sage_const_1 ].replace('(','{').replace(')','}')}}}];
toString basis({{{_sage_const_1 },{m}}}, R)
'''
t = str(macaulay2(s))
t = t.replace("{","").replace("}","").replace("^","**").replace(" ","").split("matrix")[_sage_const_1 :]
t = "".join(t).split(",")
P1 = []
for _ in t:
	if _ != "":
		eval("P1.append(R(" + _ +"))")
# print(P1)

# Macaulay2 code to run to compute Pn
s = f'''
R = QQ[x_0..x_{n},y_1..y_{num_poly}, Degrees=>{{{n+_sage_const_1 }:{{0,1}},
{str([(_sage_const_1 ,-i) for i in d])[_sage_const_1 :-_sage_const_1 ].replace('(','{').replace(')','}')}}}];
toString basis({{{n},{m}}}, R)
'''
t = str(macaulay2(s))
t = t.replace("{","").replace("}","").replace("^","**").replace(" ","").split("matrix")[_sage_const_1 :]
t = "".join(t).split(",")
Pn = []
for _ in t:
	if _ != "":
		eval("Pn.append(R(" + _ +"))")
# print(Pn)

# s += "for p from 0 to " + str(n+2) + " list hilbertFunction({p,"  + str(m) + "}, J);"

# todo: go ahead and convert this into a basis sage likes


I = F.jacobian_ideal()
J = R.quotient_ring(I)

xI = R.ideal([_*F.derivative(_) for _ in R.gens()])
xJ = R.quotient(xI)




def monomial_to_vector(m):
    return list(m.exponents()[_sage_const_0 ])

def vector_to_monomial(v):
    return prod([gens[i]**v[i] for i in range(n+num_poly+_sage_const_1 )])

P1_pts = [monomial_to_vector(a) for a in P1]

Pn_minus_1 = Pn #todo: rename this!
Pn_minus_1_pts = [monomial_to_vector(a) for a in Pn_minus_1]
size_pn_minus_1 = len(Pn_minus_1_pts)

Pn_minus_1_list = list(Pn_minus_1)

def to_pn_minus_1_basis(g):
    return_vec = size_pn_minus_1 * [_sage_const_0 ]
    for monomial in g.monomials():
        ind = Pn_minus_1_list.index(monomial)
        return_vec[ind] = g.monomial_coefficient(monomial)
    return return_vec

# todo: figure out why I need to cast to R
def from_pn_minus_1_basis(g_vec):
    return sum([g_vec[i] * Pn_minus_1_list[i] for i in range(size_pn_minus_1)])



def monomial_degree(m):
#   e looks like  [(1, 1, 1, 1, 1)]
    e = m.exponents()[_sage_const_0 ]
#   x_i contribute (0, sum(e[:n]))
#   y_i contribute (sum(e[n:],sum([-poly_list[i].degree() for i in range(num_poly)] ))
    return [sum(e[n+_sage_const_1 :]), sum(e[:n+_sage_const_1 ])+sum([-d[i] for i in range(num_poly)] )]

# each monomial is of the form m / F^j; returns j
def pole_order(m):
    e = m.exponents()[_sage_const_0 ]
    return sum(e[n+_sage_const_1 :])

# def degree_vector(v):
#     return sum([weights[i] * v[i] for i in range(n+num_poly)]) // fdeg


def sigma(g):
    return sum([g.coefficient(monomial)* monomial**p for monomial in g.monomials()])

def frobenius(g,prec=_sage_const_2 ):
    d = pole_order(g)
    summer = _sage_const_0 
    sigma_g = sigma(g)
    fj = R(_sage_const_1 )
    for j in range(prec):
#         cacheing may be appropriate
        numer = binomial(-d,j) * binomial(d+prec-_sage_const_1 ,d+j) * sigma_g*sigma(fj) / factorial(pole_order(sigma_g) + pole_order(sigma(fj))-_sage_const_1 )
        summer += numer
        fj *= F
    return summer


def frobenius_on_cohom(i,prec = _sage_const_2 ):
    g = R(B[i])*prod(gens)
    g = frobenius(g,prec)
    return R(g *p**(n -_sage_const_1 ) / prod(gens))



lift_dict = {}

def lift_poly(g):
    summer = (n+num_poly+_sage_const_1 ) * [_sage_const_0 ]
    for monomial in g.monomials():

        if not monomial in lift_dict.keys():
            c = xJ(monomial).lift()
            r = (monomial-c).lift(xI)
            lift_dict[monomial] = r
        monomial_lift = lift_dict[monomial]
        c = g.monomial_coefficient(monomial)
        for i in range(n+num_poly+_sage_const_1 ):
            summer[i] += c*monomial_lift[i]
    return summer   

def to_uvg(h):
    hdict = h.dict()
    return_list = []


    for etuple in hdict.keys():
        vector = list(etuple)
        c = hdict[etuple]
        # todo: save on divisibility?

        g = _sage_const_0 
        for g_vec in Pn_minus_1_pts:
            if all([vector[i] >= g_vec[i] for i in range(n+num_poly+_sage_const_1 )]):
                g = g_vec
        vector = [vector[i] - g[i] for i in range(n+num_poly+_sage_const_1 )]
        u = vector
        g = c * vector_to_monomial(g)
        return_list.append([u,g])
    return return_list


# set of matrices of size |Pn_minus_1| x |Pn_minus_1|
Ruv_const_dict = {}
Ruv_u_dict = {}

def Ruv_const_helper(v,g):
    gi = lift_poly(vector_to_monomial(v)*g)
    h = sum([gi[i] + Rgens[i] * (gi[i]).derivative(Rgens[i]) for i in range(n+num_poly+_sage_const_1 )])
    return to_pn_minus_1_basis(h)

def Ruv_u_helper(v,g):
    gi = lift_poly(vector_to_monomial(v)*g)
    return_ls = [gi[i] for i in range(n+num_poly+_sage_const_1 )]
    return [to_pn_minus_1_basis(a) for a in return_ls]

def compute_Ruv(v):
    Ruv_u_mat = [list(matrix(size_pn_minus_1)) for i in range(n+num_poly+_sage_const_1 )]
    Ruv_const_mat = list(matrix(size_pn_minus_1))

    for i in range(size_pn_minus_1):
        g = Pn_minus_1_list[i]
        temp = Ruv_u_helper(v,g)
        for j in range(n):
            Ruv_u_mat[j][i] = temp[j]
        Ruv_const_mat[i] = Ruv_const_helper(v,g)
    Ruv_const_dict[tuple(v)] = matrix(Ruv_const_mat)
    Ruv_u_dict[tuple(v)] = tuple([matrix(Ruv_u_mat[i]) for i in range(n+num_poly+_sage_const_1 )])
    return


def reduce_griffiths_dwork(u,g):
    g_vec = vector(matrix(to_pn_minus_1_basis(g)))
    # todo: speed up!
    while (u not in P1_pts):
        print(u)
        best_k = -_sage_const_1 
        best_v = -_sage_const_1 
        for v in P1_pts:
            k = max(u) # garbage value
            for i in range(n+num_poly+_sage_const_1 ):
                if v[i]>_sage_const_0 :
                    k = min(k, u[i]//v[i])
            if k > best_k:
                best_k = k
                best_v = v
        v = best_v
        k = best_k
        if pole_order(vector_to_monomial([u[i] - k*v[i] for i in range(n+num_poly+_sage_const_1 )])) == _sage_const_0 :
            # print("error: overcounted")
            k -= _sage_const_1 
        # print(u,v,k)

        if not tuple(v) in Ruv_u_dict.keys():
            compute_Ruv(v)
        C = Ruv_const_dict[tuple(v)]
        D = Ruv_u_dict[tuple(v)]

        E = C + sum([u[i]* D[i] for i in range(n+num_poly+_sage_const_1 )])
        F = sum([v[i] * D[i] for i in range(n+num_poly+_sage_const_1 )])

        for ind in range(_sage_const_1 ,k+_sage_const_1 ):
            # left g -> g A
            g_vec *= (E-ind*F)
            # g_vec *=  (C + sum([(u[i]-ind*v[i]) * D[i] for i in range(n)]))
        u = [u[i] - k*v[i] for i in range(n+num_poly+_sage_const_1 )]
    g = from_pn_minus_1_basis(vector(g_vec))
    
    return u,g


reduction_dict = {}

frob_matrix = [[_sage_const_0  for i in range(len(B))] for j in range(len(B))]

for i in range(len(B)):
    h = frobenius_on_cohom(i,prec)
    htemp = _sage_const_0 
    for u,g in to_uvg(h):
        # todo: can deduce degree u
        # todo: can just keep track of denom as (denom % p^prec) * p^something
        # denom = factorial(degree(vector_to_monomial(u))-1+n)

        # this is the slow step
        u,g = reduce_griffiths_dwork(u,g)

        htemp += vector_to_monomial(u) * g# // denom
    h = htemp





    summer = R(_sage_const_0 )
    monomial_list = [R(h.monomial_coefficient(monomial)) * monomial for monomial in h.monomials()]
    while len(monomial_list) > _sage_const_0 :
        term  = monomial_list[_sage_const_0 ]
        monomial_list.remove(term)
        # print(term)
        if term not in QQ:  
            print(term)
            if len(term.monomials())>_sage_const_1 :
                print('error: too many terms')
            monomial = R(term.monomials()[_sage_const_0 ])
            if not monomial in B:
                if not monomial in reduction_dict.keys():
                    q = J(monomial).lift()
                    r = monomial - q
                    l = r.lift(I)
                    temp = sum([l[i].derivative(gens[i]) for i in range(n+num_poly+_sage_const_1 )])
                    reduction_dict[monomial] = temp + q
                result = term.monomial_coefficient(monomial)* reduction_dict[monomial]
                # result = sum([_*term.monomial_coefficient(monomial) * result.monomial_coefficient(_) for _ in result.monomials()])
                # for _ in result.monomials():
                    # monomial_list.append(_ * result.monomial_coefficient(_))
                h = sum(monomial_list) + result
                monomial_list = [R(h.monomial_coefficient(monomial)) * monomial for monomial in h.monomials()]
                
            else:
                summer += term
        else:
            summer += term
    
    for j in range(len(B)):
        frob_matrix[i][j] = summer.monomial_coefficient(R(B[j])) * factorial(pole_order(B[j])+num_poly -_sage_const_1 ) #% p^prec
        
    print(B[i],summer)

if all([all([a.ord(p)>=_sage_const_0  for a in b]) for b in frob_matrix]):
    frob_matrix = [[a % p** prec for a in b] for b in frob_matrix]
    print(frob_matrix)
else:
    print("Warning: non-invertible elements encountered")
frob_matrix = matrix(frob_matrix)

poly = (frob_matrix.characteristic_polynomial())
print(poly)

# todo: mod these based on weil conjectures
poly = sum([(poly.monomial_coefficient(mono) % p**(prec) )* mono if (poly.monomial_coefficient(mono)% p**prec) < (p**prec)//_sage_const_2  else (-p**(prec)+poly.monomial_coefficient(mono)% p**prec)*mono for mono in poly.monomials()])
print(poly)
print(p)

